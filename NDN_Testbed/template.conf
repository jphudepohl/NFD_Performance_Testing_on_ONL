; the general section contains all the general settings for router

; template
; replacements :
;   sitename (clientzero)
;   routername (client0)
;   neighbors (for the whole neighbor section)

general
{
; mandatory configuration command section network, site and router

    network /ndn/         ; name of the network the router belongs to in ndn URI format
    site /edu/!!sitename!!    ; name of the site the router belongs to in ndn URI format
    router /%C1.Router/!!routername!!    ; name of the router in ndn URI format

; lsa-refresh-time is the time in seconds, after which router will refresh its LSAs

    lsa-refresh-time 1080      ; default value 1800. Valid values 240-7200

; log-level is to set the levels of log for NLSR

    log-level  DEBUG       ; default value INFO, valid value DEBUG, INFO

    ; (These directories weren't made and I didn't have permission to write to them)
    ; log-dir /var/log/ndn/nlsr/  ; path for log directory (Absolute path)
    ; seq-dir /var/lib/ndn/nlsr/  ; path for sequence directory (Absolute path)
    
    log-dir /users/jhudepohl/log/ndn/nlsr/
    seq-dir /users/jhudepohl/lib/ndn/nlsr/
}

; the neighbors section contains the configuration for router's neighbors and hello's behavior

neighbors
{
; in case hello interest timed out, router will try 'hello-retries' times at 'hello-time-out'
; seconds interval before giving up for any neighbors (deciding link is down)

   hello-retries 10                     ; interest retries number in integer. Default value 3
                                       ; valid values 1-10

   hello-timeout 4                    ; interest time out value in integer. Default value 1
                                       ; Valid values 1-15

   hello-interval  60                  ; interest sending interval in seconds. Default value 60
                                       ; valid values 30-90
; neighbor command is used to configure router's neighbor. Each neighbor will need
; one block of neighbor command



; Router Names
; ANYANG:    /ndn/kr/anyang/%C1.Router/anyanghub
; ARIZONA:   /ndn/edu/arizona/%C1.Router/hobo
; BASEL:     /ndn/ch/unibas/%C1.Router/cs-ndn-testbed1
; BUPT:      /ndn/cn/edu/bupt/%C1.Router/bupthub
; BYU:       /ndn/edu/byu/%C1.Router/pasta10
; CAIDA:     /ndn/org/caida/%C1.Router/click
; CSU:       /ndn/edu/colostate/%C1.Router/mccoy
; KISTI:     /ndn/kr/re/kisti/%C1.Router/router3
; LIP6:      /ndn/fr/lip6/%C1.Router/ndnhub
; MEMPHIS:   /ndn/edu/memphis/%C1.Router/titan
; MICHIGAN:  /ndn/edu/umich/%C1.Router/ndn0
; NEU:       /ndn/edu/neu/%C1.Router/ndnrtr
; NTNU:      /ndn/no/ntnu/%C1.Router/ndnnode
; ORANGE1:   /ndn/fr/orange1/%C1.Router/orange-ndn-1
; PADUA:     /ndn/it/unipd/%C1.Router/ndnnode
; PKU:       /ndn/cn/edu/pku/%C1.Router/pkuhub
; REMAP:     /ndn/edu/ucla/%C1.Router/cs/aleph
; SYSTEMX:   /ndn/fr/irt-systemx/%C1.Router/systemx-ndn-1
; TONGJI:    /ndn/cn/edu/tongji/%C1.Router/cnlab
; UCI:       /ndn/edu/uci/%C1.Router/ndnhub
; UCLA:      /ndn/edu/ucla/%C1.Router/cs/spurs
; UIUC:      /ndn/edu/illinois/%C1.Router/ndnx
; URJC:      /ndn/es/urjc/%C1.Router/insula
; VERISIGN:  /ndn/NLSR/LSA/com/verisign/%C1.Router/labs-ndn3
; WASEDA:    /ndn/jp/waseda/%C1.Router/parklab
; WU:        /ndn/edu/wustl/%C1.Router/wundngw

; RTR IP Address
; CSU: ndn.netsec.colostate.edu
; MICHIGAN: ndn0.eecs.umich.edu
; UCLA: 131.179.196.46
; BUPT: 114.247.165.44
; PKU: 162.105.146.26
; WU: wundngw.arl.wustl.edu
; MEMPHIS: titan.cs.memphis.edu
; ARIZONA: hobo.cs.arizona.edu
; REMAP: aleph.ndn.ucla.edu
; UIUC: ndnx.cs.illinois.edu
; UCI: ndnhub.ics.uci.edu
; CAIDA: click.caida.org
; NEU: 129.10.52.193
; TONGJI: cnlab.tongji.edu.cn
; LIP6: ndnhub.ipv6.lip6.fr
; ORANGE1: 161.105.195.18
; BYU: pasta10.cs.byu.edu
; VERISIGN: 72.13.58.118
; NEU: 129.10.52.193
; NTNU: 129.241.208.115
; SYSTEMX: systemx-ndn-1.enst.fr
; BASEL: 192.43.193.111
; PADUA: ndnnode.math.unipd.it
; URJC: 193.147.51.186
; ANYANG: 210.114.89.49
; KISTI: 203.253.235.168
; WASEDA: 133.9.73.66

   !!neighbors!!

}

; the hyperbolic section contains the configuration settings of enabling a router to calculate
; routing table using [hyperbolic routing table calculation](http://arxiv.org/abs/0805.1266) method

hyperbolic
{
; commands in this section follows a strict order
; the switch is used to set hyperbolic routing calculation in NLSR

    state off             ; default value 'off', set value 'on' to enable hyperbolic routing table
                           ; calculation which turns link state routing 'off'. set value to 'dry-run"
                           ; to test hyperbolic routing and compare with link state routing.


    radius   123.456       ; radius of the router in hyperbolic coordinate system
    angle    1.45          ; angle of the router in hyperbolic coordinate system
}


; the fib section is used to configure fib entry's type to ndn FIB updated by NLSR

fib
{
; the max-faces-per-prefix is used to limit the number of faces for each name prefixes
; by NLSR in ndn FIB

    max-faces-per-prefix 10   ; default value 0. Valid value 0-60. By default (value 0) NLSR adds
                             ; all available faces for each reachable name prefixes in NDN FIB

}

; the advertising section contains the configuration settings of the name prefixes
; hosted by this router

advertising
{
; the ndnname is used to advertised name from the router. To advertise each name prefix
; configure one block of ndnname configuration command for every name prefix.

    prefix /ndn/edu/!!sitename!!           ; name in ndn URI format
    prefix /ndn/edu/!!routername!!           ; name in ndn URI format
}

security
{
  validator
  {
    rule
    {
      id "NSLR Hello Rule"
      for data
      filter
      {
        type name
        regex ^[^<NLSR><INFO>]*<NLSR><INFO><><>$
      }
      checker
      {
        type customized
        sig-type rsa-sha256
        key-locator
        {
          type name
          hyper-relation
          {
            k-regex ^([^<KEY><NLSR>]*)<NLSR><KEY><ksk-.*><ID-CERT>$
            k-expand \\1
            h-relation equal
            p-regex ^([^<NLSR><INFO>]*)<NLSR><INFO><><>$
            p-expand \\1
          }
        }
      }
    }

    rule
    {
      id "NSLR LSA Rule"
      for data
      filter
      {
        type name
        regex ^[^<NLSR><LSA>]*<NLSR><LSA>
      }
      checker
      {
        type customized
        sig-type rsa-sha256
        key-locator
        {
          type name
          hyper-relation
          {
            k-regex ^([^<KEY><NLSR>]*)<NLSR><KEY><ksk-.*><ID-CERT>$
            k-expand \\1
            h-relation equal
            p-regex ^([^<NLSR><LSA>]*)<NLSR><LSA>(<>*)<><><>$
            p-expand \\1\\2
          }
        }
      }
    }

    rule
    {
      id "NSLR Hierarchy Exception Rule"
      for data
      filter
      {
        type name
        regex ^[^<KEY><%C1.Router>]*<%C1.Router>[^<KEY><NLSR>]*<KEY><ksk-.*><ID-CERT><>$
      }
      checker
      {
        type customized
        sig-type rsa-sha256
        key-locator
        {
          type name
          hyper-relation
          {
        k-regex ^([^<KEY><%C1.Operator>]*)<%C1.Operator>[^<KEY>]*<KEY><ksk-.*><ID-CERT>$
            k-expand \\1
            h-relation equal
            p-regex ^([^<KEY><%C1.Router>]*)<%C1.Router>[^<KEY>]*<KEY><ksk-.*><ID-CERT><>$
            p-expand \\1
          }
        }
      }
    }

    rule
    {
      id "NSLR Hierarchical Rule"
      for data
      filter
      {
        type name
        regex ^[^<KEY>]*<KEY><ksk-.*><ID-CERT><>$
      }
      checker
      {
        type hierarchical
        sig-type rsa-sha256
      }
    }

    trust-anchor
    {
      ; type file
      ; file-name "/etc/ndn/nlsr/keys/root.cert"

      type any
    }
  }
   ; optional, a file containing the root certificate. only the router
     ; that is designated to publish root cert needs to specify this
   ;cert-to-publish "/etc/ndn/nlsr/keys/root.cert"  

   ; optional, a file containing the site certificate. only the router
     ; that is designated to publish site cert need to specify this
   ; cert-to-publish "/etc/ndn/nlsr/keys/site.cert" 

   ; optional, a file containing the operator certificate. only the
     ; router that is designated to publish operator cert need to specify this
   ; cert-to-publish "/etc/ndn/nlsr/keys/operator.cert"

  ; required, a file containing the router certificate.
  ; cert-to-publish "/etc/ndn/nlsr/keys/router.cert" 
}



